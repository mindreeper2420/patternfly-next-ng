{"version":3,"file":"button.component.js","sourceRoot":"","sources":["../../../build/src/app/button/button.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACL,SAAS,EACT,YAAY,EACZ,KAAK,EAEL,MAAM,EACN,iBAAiB,EAClB,MAAM,eAAe,CAAC;AAGvB,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAExD;;GAEG;AAWH;IAsFE;;OAEG;IACH;QAxFA;;WAEG;QACM,cAAS,GAAY,KAAK,CAAC;QAEpC;;WAEG;QACM,aAAQ,GAAY,KAAK,CAAC;QA0BnC;;WAEG;QACM,mBAAc,GAAY,KAAK,CAAC;QAmBzC;;;;WAIG;QACM,UAAK,GAAW,WAAW,CAAC,OAAO,CAAC;QAO7C;;;;WAIG;QACM,SAAI,GAAW,UAAU,CAAC,MAAM,CAAC;QAO1C;;WAEG;QACgB,YAAO,GAAG,IAAI,YAAY,EAAE,CAAC;IAMhD,CAAC;IAED,iBAAiB;IAEjB;;OAEG;IACH,kCAAQ,GAAR;IACA,CAAC;IAED,UAAU;IAEV,qCAAW,GAAX,UAAY,MAAkB;QAC5B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;YAChB,SAAS,EAAE,SAAS;YACpB,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,KAAK,EAAE,IAAI,CAAC,KAAK;SACH,CAAC,CAAC;IACpB,CAAC;IAzGQ;QAAR,KAAK,EAAE;;sDAA4B;IAK3B;QAAR,KAAK,EAAE;;qDAA2B;IAK1B;QAAR,KAAK,EAAE;;iDAAc;IAKb;QAAR,KAAK,EAAE;;uDAAoB;IAOnB;QAAR,KAAK,EAAE;;wDAAqB;IAOpB;QAAR,KAAK,EAAE;;uDAAoB;IAKnB;QAAR,KAAK,EAAE;;2DAAiC;IAOhC;QAAR,KAAK,EAAE;;uDAAoB;IAKnB;QAAR,KAAK,EAAE;;+CAAY;IAKX;QAAR,KAAK,EAAE;;iDAAc;IAOb;QAAR,KAAK,EAAE;;kDAAqC;IAKpC;QAAR,KAAK,EAAE;;oDAAiB;IAOhB;QAAR,KAAK,EAAE;;iDAAkC;IAKjC;QAAR,KAAK,EAAE;;kDAAe;IAKJ;QAAlB,MAAM,CAAC,SAAS,CAAC;;oDAA8B;IApFrC,eAAe;QAV3B,SAAS,CAAC;YACT,aAAa,EAAE,iBAAiB,CAAC,IAAI;YACrC,QAAQ,EAAE,aAAa;YACvB,QAAQ,EAAE,4oBAKgH;SAC3H,CAAC;;OACW,eAAe,CA8G3B;IAAD,sBAAC;CAAA,AA9GD,IA8GC;SA9GY,eAAe","sourcesContent":["import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { ButtonEvent } from './button-event';\nimport { ButtonStyle, ButtonType } from './button-type';\n\n/**\n * Button component.\n */\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'pfng-button',\n  template: `<button class=\"pf-c-button\" [attr.form]=\"form\" [attr.formaction]=\"formAction\" [attr.formenctype]=\"formEncType\" [attr.formmethod]=\"formMethod\" [attr.formnovalidate]=\"formNoValidate\" [attr.formtarget]=\"formTarget\" [autofocus]=\"autofocus\" [disabled]=\"disabled\" [id]=\"id\" [name]=\"name\" [ngClass]=\"{\n          'pf-is-danger': style === 'danger',\n          'pf-is-primary': style === 'primary',\n          'pf-is-secondary': style === 'secondary',\n          'pf-is-tertiary': style === 'tertiary'\n        }\" [title]=\"tooltip\" [type]=\"type\" [value]=\"value\" (click)=\"handleClick($event)\"><ng-content></ng-content></button>`\n})\nexport class ButtonComponent implements OnInit {\n  /**\n   * Indicates button should automatically get focus when the page loads\n   */\n  @Input() autofocus: boolean = false;\n\n  /**\n   * The disabled state\n   */\n  @Input() disabled: boolean = false;\n\n  /**\n   * Specifies one or more forms the button belongs to\n   */\n  @Input() form: string;\n\n  /**\n   * Specifies where to send the form-data (a URL) when a form is submitted. Only for type submit\n   */\n  @Input() formAction: string;\n\n  /**\n   * Specifies how form-data should be encoded before sending it to a server. Only for type submit\n   *\n   * See [[ButtonFormEncType]]\n   */\n  @Input() formEncType: string;\n\n  /**\n   * Specifies how to send the form-data (which HTTP method to use). Only for type submit\n   *\n   * See [[ButtonFormMethod]]\n   */\n  @Input() formMethod: string;\n\n  /**\n   * Specifies that the form-data should not be validated on submission. Only for type submit\n   */\n  @Input() formNoValidate: boolean = false;\n\n  /**\n   * Specifies where to display the response after submitting the form. Only for type submit\n   *\n   * See [[ButtonFormTarget]]\n   */\n  @Input() formTarget: string;\n\n  /**\n   * The button ID\n   */\n  @Input() id: string;\n\n  /**\n   * The button name\n   */\n  @Input() name: string;\n\n  /**\n   * The button style\n   *\n   * See [[ButtonStyle]]\n   */\n  @Input() style: string = ButtonStyle.DEFAULT;\n\n  /**\n   * The button tooltip\n   */\n  @Input() tooltip: string;\n\n  /**\n   * The button type\n   *\n   * See [[ButtonType]]\n   */\n  @Input() type: string = ButtonType.BUTTON;\n\n  /**\n   * The initial button value\n   */\n  @Input() value: string;\n\n  /**\n   * The event emitted when a button has been clicked\n   */\n  @Output('onClick') onClick = new EventEmitter();\n\n  /**\n   * The default constructor\n   */\n  constructor() {\n  }\n\n  // Initialization\n\n  /**\n   * Setup component configuration upon initialization\n   */\n  ngOnInit(): void {\n  }\n\n  // Actions\n\n  handleClick($event: MouseEvent): void {\n    this.onClick.emit({\n      eventName: 'onClick',\n      id: this.id,\n      name: this.name,\n      value: this.value\n    } as ButtonEvent);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}